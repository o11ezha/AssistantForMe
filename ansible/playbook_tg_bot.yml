- name: Setup
  hosts: all
  become: true

- hosts: master_db
  vars_files:
    - env.yaml
  tasks:
    - name: Install PostgresSQL
      become: true
      apt:
        name: postgresql
        state: present

    - name: Install Python packages
      become: true
      become_user: postgres
      pip:
        name: psycopg2-binary
        state: present

    - name: Mkdir /oracle/pg_data/archive/
      become: true
      ansible.builtin.file:
        path: /oracle/pg_data/archive/
        state: directory
        mode: '0777'
        recurse: yes

    - name: Create DB
      become: true
      become_user: postgres
      postgresql_db:
        name: "{{ db_name }}"
        state: present

    - name: Change postgres db user
      postgresql_user:
        db: "{{ db_name }}"
        name: postgres
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: Copy SQL script to target machine
      copy:
        src: "init.sql"
        dest: "~/init.sql"

    - name: Read SQL script
      slurp:
        src: init.sql
      register: init_sql

    - name: Execute SQL script in PostgreSQL
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{ db_name }}"
        query: "{{ init_sql.content | b64decode }}"
        login_user: postgres
        login_password: "{{ db_password }}"

    - name: Update pg_hba.conf
      become: true
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: host
        source: "{{ slave_db_ip }}/24"
        users: "{{ db_repl_user }} "
        databases: replication
        method: scram-sha-256
        create: true

    - name: Update pg_hba.conf for TGBot
      become: true
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: host
        source:  "{{ master_db_ip }}/32"
        users: all
        databases: all
        method: password
        create: true

    - name: Set PostgreSQL parameters
      become: true
      become_user: postgres
      community.postgresql.postgresql_set:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict:
        archive_mode: 'on'
        archive_command: 'cp %p /oracle/pg_data/archive/%f'
        max_wal_senders: '10'
        wal_level: 'replica'
        log_replication_commands: 'on'
        wal_log_hints: 'on'
        logging_collector: 'on'
        log_directory: '/var/log/postgresql'
        log_filename: 'postgresql-15-main.log'
        listen_addresses: '*'

    - service:
        name: postgresql
        state: stopped
      become: true

    - service:
        name: postgresql
        state: started
      become: true

- hosts: slave_db
  vars_files:
    - env.yaml
  tasks:
    - name: Install Postgres Packages
      become: true
      apt:
        name: postgresql
        state: present

    - name: Install Python packages
      become: true
      pip:
        name: psycopg2-binary
        state: present

    - service:
        name: postgresql
        state: started
      become: true

    - name: Set PostgreSQL parameters
      become_user: postgres
      become: true
      community.postgresql.postgresql_set:
        name: "listen_addresses"
        value: "localhost, {{ master_db_ip }}"

    - service:
        name: postgresql
        state: stopped
      become: true

    - file:
        path: /var/lib/postgresql/14/main/
        state: absent
      become: true

    - file:
        path: /var/lib/postgresql/14/main/
        owner: postgres
        group: postgres
        mode: 0700
        state: directory
      become: true

    - name: Replica
      become: true
      become_user: postgres
      retries: 3
      delay: 10
      register: result
      until: result.rc == 0
      shell: |
        export PGPASSWORD="{{ db_password }}" &&
        pg_basebackup -R -h {{ master_db_ip }} -U {{ db_repl_user }} -D /var/lib/postgresql/14/main -P -v

    - service:
        name: postgresql
        state: started
      become: true


- hosts: master_db
  vars_files:
    - env.yaml
  tasks:
    - name: Install libpq-dev for psycopg2
      become: true
      apt:
        name: libpq-dev
        state: present

    - name: Check if PTTelegramBOT directory exists
      stat:
        path: "{{ tg_bot_dir }}"
      register: pttelegrambot_dir

    - name: Remove PTTelegramBOT directory if it exists
      file:
        path: "{{ tg_bot_dir }}"
        state: absent
      when: pttelegrambot_dir.stat.exists

    - name: Clone Telegram Bot Repository
      ansible.builtin.git:
        repo: "{{ tg_bot_repo }}"
        dest: "{{ tg_bot_dir }}"
        update: yes
        version: docker

    - name: Install Python Dependencies
      become: true
      pip:
        requirements: "{{ tg_bot_dir }}/DockerFileBot/requirements.txt"

    - name: Copy .env for ansible to remote host
      copy:
        src: ".env"
        dest: "{{ tg_bot_dir }}/.env"

    - name: Execute python script! Yay!
      become: true
      command: "python3 {{ tg_bot_dir }}/DockerFileBot/main.py"